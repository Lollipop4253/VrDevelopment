using UnityEngine;

public class Tank : MonoBehaviour
{
    [Header("Lever References")]
    public LeverController leftLever;
    public LeverController rightLever;
    public CustomTransmissionLever speedLever;

    [Header("Movement Settings")]
    public float moveSpeed = 50f;
    public float turnSpeed = 30f;
    public float deadZone = 0.1f;

    [Header("Speed Limits")]
    public float maxSpeed = 10f;
    public float maxAngularSpeed = 3f;

    [Header("Damping")]
    public float angularDampingFactor = 0.8f;

    [Header("Idle Forward Speed")]
    public float idleForwardSpeed = 0.3f;

    private Rigidbody rb;

    void Start()
    {
        rb = GetComponent<Rigidbody>();
        if (rb == null)
        {
            Debug.LogError("Rigidbody not found on tank!");
        }
    }

    void FixedUpdate()
    {
        if (leftLever == null || rightLever == null || speedLever == null)
        {
            Debug.LogError("Lever references are not assigned!");
            return;
        }

        float leftValue = leftLever.GetLeverValue();
        float rightValue = rightLever.GetLeverValue();
        float speedValue = speedLever.ChangeTargetPosition(); // üëà –¢–µ–ø–µ—Ä—å float –æ—Ç -1 –¥–æ 1

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –º—ë—Ä—Ç–≤—É—é –∑–æ–Ω—É
        if (Mathf.Abs(leftValue) < deadZone) leftValue = 0f;
        if (Mathf.Abs(rightValue) < deadZone) rightValue = 0f;

        Debug.Log($"Left Value: {leftValue:F2} | Right Value: {rightValue:F2} | Speed Lever: {speedValue:F2}");

        // üî¥ –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê: –µ—Å–ª–∏ —Å–∫–æ—Ä–æ—Å—Ç—å == 0 ‚Äî –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
        if (Mathf.Abs(speedValue) < 0.05f) // –Ω–µ–±–æ–ª—å—à–æ–π –ø–æ—Ä–æ–≥ –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞
        {
            rb.linearVelocity = Vector3.zero;
            rb.angularVelocity = Vector3.zero;
            return;
        }

        // üí° –†–∞—Å—á—ë—Ç –¥–≤–∏–∂–µ–Ω–∏—è
        float forwardSpeed = (leftValue + rightValue) * 0.5f * moveSpeed;

        // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –≤–ø–µ—Ä—ë–¥, –µ—Å–ª–∏ —Ä—ã—á–∞–≥–∏ –≤ –º—ë—Ä—Ç–≤–æ–π –∑–æ–Ω–µ
        if (Mathf.Abs(leftValue) < deadZone && Mathf.Abs(rightValue) < deadZone)
        {
            forwardSpeed = idleForwardSpeed * moveSpeed;
        }

        // üîÑ –ù–ï–õ–ò–ù–ï–ô–ù–ê–Ø –ß–£–í–°–¢–í–ò–¢–ï–õ–¨–ù–û–°–¢–¨ –ü–û–í–û–†–û–¢–ê
        float turnDiff = rightValue - leftValue;
        float turnSpeedValue = Mathf.Sign(turnDiff) * Mathf.Pow(Mathf.Abs(turnDiff), 1.5f) * turnSpeed;

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —É—Å–∫–æ—Ä–µ–Ω–∏–µ –≤–ø–µ—Ä—ë–¥/–Ω–∞–∑–∞–¥ –æ—Ç —Ç—Ä–µ—Ç—å–µ–≥–æ —Ä—ã—á–∞–≥–∞
        forwardSpeed *= speedValue; // üëà –£–º–Ω–æ–∂–∞–µ–º –Ω–∞ -1..1

        Debug.Log($"Forward Force: {forwardSpeed:F2} | Turn Torque: {turnSpeedValue:F2}");

        rb.AddForce(-transform.right * forwardSpeed, ForceMode.Force);
        rb.AddTorque(Vector3.up * turnSpeedValue, ForceMode.Force);

        // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        if (rb.linearVelocity.magnitude > maxSpeed)
        {
            rb.linearVelocity = rb.linearVelocity.normalized * maxSpeed;
        }

        if (rb.angularVelocity.magnitude > maxAngularSpeed)
        {
            rb.angularVelocity = rb.angularVelocity.normalized * maxAngularSpeed;
        }

        rb.linearVelocity = new Vector3(rb.linearVelocity.x, 0, rb.linearVelocity.z);

        // –ó–∞–º–µ–¥–ª–µ–Ω–∏–µ –ø—Ä–∏ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã—Ö —Ä—ã—á–∞–≥–∞—Ö
        if (Mathf.Abs(leftValue) < deadZone && Mathf.Abs(rightValue) < deadZone)
        {
            rb.angularVelocity *= angularDampingFactor;
        }
    }
}