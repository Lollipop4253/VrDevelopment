using UnityEngine;
using UnityEngine.XR.Interaction.Toolkit;

public class ContinuousRotator : MonoBehaviour
{
    [SerializeField] private Vector3 rotationAxis = Vector3.up; // –û—Å—å –≤—Ä–∞—â–µ–Ω–∏—è (Y)
    [SerializeField] private float rotationSpeed = 1.5f;       // –°–∫–æ—Ä–æ—Å—Ç—å —Ä–µ–∞–∫—Ü–∏–∏
    [SerializeField] private bool useHapticsOnFullRotation = false; // –û—Ç–¥–∞—á–∞ –ø—Ä–∏ –ø–æ–ª–Ω–æ–º –æ–±–æ—Ä–æ—Ç–µ

    private UnityEngine.XR.Interaction.Toolkit.Interactables.XRGrabInteractable grabInteractable;
    private Quaternion initialLocalRotation;

    private float totalAngle = 0f;           // –ü–æ–ª–Ω—ã–π —É–≥–æ–ª (–º–æ–∂–µ—Ç –±—ã—Ç—å >360)
    private float previousAngle = 0f;        // –ü—Ä–µ–¥—ã–¥—É—â–∏–π —É–≥–æ–ª –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [-180, 180]
    private int fullRotations = 0;           // –°—á—ë—Ç—á–∏–∫ –ø–æ–ª–Ω—ã—Ö –æ–±–æ—Ä–æ—Ç–æ–≤

    void Start()
    {
        grabInteractable = GetComponent<UnityEngine.XR.Interaction.Toolkit.Interactables.XRGrabInteractable>();
        initialLocalRotation = transform.localRotation;

        var rb = GetComponent<Rigidbody>();
        if (rb == null)
        {
            Debug.LogError("Rigidbody is required!");
            return;
        }

        // –ë–ª–æ–∫–∏—Ä—É–µ–º –≤—Å—ë, –∫—Ä–æ–º–µ –≤—Ä–∞—â–µ–Ω–∏—è –≤–æ–∫—Ä—É–≥ –Ω—É–∂–Ω–æ–π –æ—Å–∏
        rb.constraints = RigidbodyConstraints.FreezePositionX |
                         RigidbodyConstraints.FreezePositionY |
                         RigidbodyConstraints.FreezePositionZ |
                         RigidbodyConstraints.FreezeRotationX |
                         RigidbodyConstraints.FreezeRotationZ;
    }

    void Update()
    {
        if (!grabInteractable.isSelected) return;

        UpdateRotation();
    }

    void UpdateRotation()
    {
        var interactor = grabInteractable.interactorsSelecting[0];
        Vector3 controllerPos = interactor.transform.position;
        Vector3 objectPos = transform.position;

        // –í–µ–∫—Ç–æ—Ä –æ—Ç –æ–±—ä–µ–∫—Ç–∞ –∫ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—É
        Vector3 toController = controllerPos - objectPos;

        // –ü—Ä–æ–µ–∫—Ü–∏—è –Ω–∞ –ø–ª–æ—Å–∫–æ—Å—Ç—å, –ø–µ—Ä–ø–µ–Ω–¥–∏–∫—É–ª—è—Ä–Ω—É—é –æ—Å–∏ –≤—Ä–∞—â–µ–Ω–∏—è
        Vector3 projected = Vector3.ProjectOnPlane(toController, rotationAxis).normalized;

        if (projected.magnitude < 0.05f) return;

        // –£–≥–æ–ª –≤ –ø–ª–æ—Å–∫–æ—Å—Ç–∏ (–≤—Å–µ–≥–¥–∞ –æ—Ç -180 –¥–æ +180)
        float currentAngle = Vector3.SignedAngle(Vector3.right, projected, rotationAxis);

        // –í—ã—á–∏—Å–ª—è–µ–º delta —Å —É—á—ë—Ç–æ–º –ø–µ—Ä–µ—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ 0/360
        float delta = currentAngle - previousAngle;

        // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Å–∫–∞—á–∫–∏ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ —á–µ—Ä–µ–∑ –≥—Ä–∞–Ω–∏—Ü—ã
        if (delta > 180f) delta -= 360f;
        if (delta < -180f) delta += 360f;

        totalAngle += delta * rotationSpeed;

        previousAngle = currentAngle;

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–ª–Ω—ã–π —É–≥–æ–ª (–º–æ–∂–µ—Ç –±—ã—Ç—å 720, -360 –∏ —Ç.–¥.)
        transform.localRotation = initialLocalRotation * Quaternion.AngleAxis(totalAngle, rotationAxis);

        // üéØ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: haptics –ø—Ä–∏ –∫–∞–∂–¥–æ–º –ø–æ–ª–Ω–æ–º –æ–±–æ—Ä–æ—Ç–µ
        if (useHapticsOnFullRotation && interactor is UnityEngine.XR.Interaction.Toolkit.Interactors.XRBaseInputInteractor controllerInteractor)
        {
            int newFullRotations = Mathf.FloorToInt(Mathf.Abs(totalAngle) / 360f);
            if (newFullRotations > fullRotations)
            {
                controllerInteractor.xrController?.SendHapticImpulse(0.3f, 0.1f);
                fullRotations = newFullRotations;
            }
        }
    }
}